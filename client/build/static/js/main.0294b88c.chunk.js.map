{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","console","error","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","input","data","log","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","userData","me","removeBook","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","form","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","user","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0294b88c.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      console.error(\"Token expired\",err)\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import gql from 'graphql-tag';\r\n//LOGIN_USER will execute the loginUser mutation set up using Apollo Server.\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n          bookId\r\n          authors\r\n          description\r\n          title\r\n          image\r\n          link\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n//ADD_USER will execute the addUser mutation.\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n          bookId\r\n          authors\r\n          description\r\n          title\r\n          image\r\n          link\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n//SAVE_BOOK will execute the saveBook mutation\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($input: bookInput!) {\r\n    saveBook(input: $input) {\r\n      \r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n          bookId\r\n          authors\r\n          description\r\n          title\r\n          image\r\n          link\r\n        }\r\n      \r\n    }\r\n  }\r\n`;\r\n//REMOVE_BOOK will execute the removeBook mutation.\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($bookId: String!) {\r\n    removeBook(bookId: $bookId) {\r\n      \r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n          bookId\r\n          authors\r\n          description\r\n          title\r\n          image\r\n          link\r\n        }\r\n      \r\n    }\r\n  }\r\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\n\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\n\n//Use the Apollo useMutation() Hook to execute the SAVE_BOOK mutation\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK)\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n    \n\n      const { data }= await saveBook({\n        variables: { input: bookToSave }\n      });\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n      console.log(\"libro:\", data)\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import gql from 'graphql-tag';\r\n//This will hold the query GET_ME, which will execute the me query set up using Apollo Server.\r\nexport const GET_ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks{\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;","\nimport React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\n/* import { removeBookId } from '../utils/localStorage'; */\n\nimport { removeBookId } from '../utils/localStorage';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { GET_ME } from '../utils/queries';\n\nconst SavedBooks = () => {\n\n//Instead, use the useQuery() Hook to execute the GET_ME query on load and save it to a variable named userData.\n  const { loading, data} = useQuery(GET_ME);\n  const userData = data?.me || {};\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK)\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      console.log(\"Token issue\")\n      return false;\n    }\n\n   \n//Use the useMutation() Hook to execute the REMOVE_BOOK mutation in the handleDeleteBook() function instead of the deleteBook() function that's imported from API file. (Make sure you keep the removeBookId() function in place!)\n    try {\n      await removeBook({\n        variables: { bookId }\n      });\n\n      if (error) {\n        throw new Error('Something went wrong!');\n      }\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      \n      console.error(\"Remove Book Error\",err);\n    }\n  };\n\n  // if data isn't here yet, say so\n    if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n//Replace the addUser() functionality imported from the API file with the ADD_USER mutation functionality.\nimport { ADD_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n//Get addUser and error from ADD_USER mutation\n  const [addUser, { error }] = useMutation(ADD_USER);\n  \n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(event);\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    console.log(form.checkValidity());\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n//Implement addUser and error from ADD_USER mutation\n    try {\n      const {data }  = await addUser({\n        variables: {...userFormData}\n      });\n      console.log(data);\n\n      if(error) {\n        throw new Error('something went wrong!');\n      }\n      /* console.log(\"data\",data.addUser.token); */\n      /* console.log(data.addUser.token), */\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(\"something went wrong\",err);\n      setShowAlert(true);\n    }\n    \n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n//Replace the loginUser() functionality imported from the API file with the LOGIN_USER mutation functionality.\nimport { LOGIN_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  //Get login and error from LOGIN_USER mutation\n  const [login, { error }] = useMutation(LOGIN_USER);\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n \n//Implement login and error from LOGIN_USER mutation\n    try {\n      const { data } = await login({\n        variables: { ...userFormData}\n      });\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n\n      console.log(data.user);\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\n//Import apollo provider and client \n/* import { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost'; */\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\n//to make every request work with the Apollo Server\n/* const client = new ApolloClient({\n  request: operation => {\n    const token = localStorage.getItem('id_token');\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    });\n  },\n  uri: '/graphql'\n}); */\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    /* Create an Apollo Provider . */\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchBooks} />\n            <Route exact path='/saved' component={SavedBooks} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}